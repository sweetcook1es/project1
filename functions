import random

SIZE = 4

def create_board():
    numbers = list(range(1, SIZE * SIZE)) + [0]
    random.shuffle(numbers)
    board = [numbers[i:i + SIZE] for i in range(0, len(numbers), SIZE)] # Создает двумерный массив
    return board

def print_board(board):
    for row in board:
        print(' '.join(f'{num:2}' if num != 0 else '  ' for num in row)) # Форматирует вывод

def find_empty_cell(board):
    for r in range(SIZE):
        for c in range(SIZE):
            if board[r][c] == 0:
                return r, c

def is_valid_move(board, dr, dc):
    r, c = find_empty_cell(board)
    return 0 <= r + dr < SIZE and 0 <= c + dc < SIZE

def move_tile(board, dr, dc):
    r, c = find_empty_cell(board)
    board[r][c], board[r + dr][c + dc] = board[r + dr][c + dc], board[r][c]

def is_solved(board):
    correct_board = [list(range(i * SIZE + 1, (i + 1) * SIZE + 1)) for i in range(SIZE)] 
    correct_board[SIZE - 1][SIZE - 1] = 0  # Пустая клетка внизу справа
    return board == correct_board # Сравнивает массивы

def get_move():
    while True:
        move = input("Введите команду (up, down, left, right) или 'exit': ").strip().lower()
        if move in ["up", "down", "left", "right", "exit"]:
            return move
        else:
            print("Неверная команда. Попробуйте снова.")

